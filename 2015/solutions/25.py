"""Advent of Code 2015: Day 25"""

from typing import Callable

"""
   | 1   2   3   4   5   6  
---+---+---+---+---+---+---+
 1 |  1   3   6  10  15  21
 2 |  2   5   9  14  20  27
 3 |  4   8  13  19  26  34
 4 |  7  12  18  25  33  42
 5 | 11  17  24  32  41  51
 6 | 16  23  31  40  50  61
"""


TARGET_ROW = 2981
TARGET_COL = 3075


def next_code(value: int, mul: int = 252533, div: int = 33554393) -> int:
    """
    Returns the value of the next code given the value of the current code
    The first code is `20151125`.
    After that, each code is generated by taking the previous one, multiplying it by `252533`,
    and then keeping the remainder from dividing that value by `33554393`
    """
    return (value * mul) % div

def what_is_n(row: int, col: int) -> int:
    """Determines where the row and column fall in the sequence"""
    return (row + col - 2) * (row + col - 1) // 2 + col - 1



def value_at(row: int, col: int, first_code: int = 20151125, base: int = 252533, mod: int = 33554393) -> int:
    exp = what_is_n(row, col)
    value = first_code
    for _ in range(exp):
        value = (value * base) % mod
    
    return value


def part_one(_: str) -> int:
    print("   | 1   2   3   4   5   6  ")
    print("---+---+---+---+---+---+---+")
    for row in range(1, 7):
        print(f" {row} |{''.join(str(what_is_n(row, col)).rjust(3) for col in range(1, 7))}")
        

    for row, col in [(1, 1), (1, 2), (TARGET_ROW, TARGET_COL)]:
        result = value_at(row=row, col=col)
        print(f"{result=}")
    return result


def part_two(_: str) -> int:
    return -1


def solve(func: Callable[[str], int]):
    input_file = "data/25.solution"
    result = func(input_file)
    print(f"The solution for {func.__name__!r} is {result}")


def main():
    solve(part_one)
    solve(part_two)


if __name__ == "__main__":
    main()
